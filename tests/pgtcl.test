if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

foreach F [list ../libpgtcl1.5[info sharedlibextension] ./libpgtcl1.5[info sharedlibextension]] {

    if {[file exists $F]} {

        load $F
    }
}

#
#   set this to your specific location
#
array set conninfo {
    host    192.168.123.180
    port    5801
    dbname  template1
    user    postgres
}

#
#
#
test pgtcl-1.1 {connect to db using old connection string} {

    set conn [pg_connect $::conninfo(dbname) \
        -connhandle pgsql3 \
        -host $::conninfo(host) \
        -port $::conninfo(port) \
        -user $::conninfo(user)]

    pg_disconnect $conn

    set conn
} pgsql3


#
#
#
test pgtcl-1.2 {connect to db using conninfo string} {

    set conn [pg_connect -connhandle pgsql3 -conninfo \
        "dbname=$::conninfo(dbname) host=$::conninfo(host) port=$::conninfo(port) user=$::conninfo(user)"]

    pg_disconnect $conn

    set conn   
} pgsql3

#
#
#
test pgtcl-1.3 {connect to db using connlist option} {

    set conn [pg::connect -connhandle pgsql3 -connlist [array get ::conninfo]]

    pg_disconnect $conn

    set conn
} pgsql3

#
#
#
test pgtcl-1.4 {connect to db using -connhandle option} {

    set conn [pg::connect -connlist [array get ::conninfo] -connhandle myhan]

    pg_disconnect $conn

    set conn
} myhan

#
#
#
test pgtcl-2.1 {use connection as command} {

    set conn [pg::connect -connlist [array get ::conninfo] -connhandle myhan]

    set res [myhan exec "SELECT * FROM Pg_class LIMIT 5"]

    pg_result $res -clear

    pg_disconnect $conn

    set res
} myhan.0

#
#
#
test pgtcl-3.1 {test getting connection handles} {

    set cnt 3
    foreach C [list 1 2 3] {
        set myconn($C) [pg::connect -connlist [array get ::conninfo] -connhandle pgsql$cnt]
        incr cnt
    }

    #set conns [lsort [pg::dbinfo]]
    set conns [lsort [pg::dbinfo connections]]

    foreach C [list 1 2 3] {
        pg::disconnect $myconn($C)
    }

    set conns
} [lsort [list pgsql3 pgsql4 pgsql5]]

#
#
#
test pgtcl-3.2 {test getting connection handles, after disconnect} {

    set cnt 3
    foreach C [list 1 2 3] {
        set myconn($C) [pg::connect -connlist [array get ::conninfo] -connhandle pgsql$cnt]
        incr cnt
    }

    foreach C [list 1 2 3] {
        pg::disconnect $myconn($C)
    }

    #pg::conninfo
    pg::dbinfo connections
} [list]

#
#
#
test pgtcl-3.3 {test renaming of connection handle command} {

    set conn [pg::connect -connlist [array get ::conninfo] -connhandle pgsql3]

    rename $conn MYCONN
    set res [MYCONN exec "SELECT * FROM Pg_class LIMIT 5"]

    pg_result $res -clear

    pg_disconnect $conn

    set res

} pgsql3.0


#
#
#
test pgtcl-3.4 {test deleting of a command handle} {
    unset -nocomplain res

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec "SELECT * FROM Pg_class  WHERE relname='tables'"]

    pg::result $res -clear
    rename $conn {}

    #pg::conninfo
    pg::dbinfo connections
} [list]

#
#
#
test pgtcl-4.1 {get result handles} {

    unset res

    set conn [pg::connect -connlist [array get ::conninfo] -connhandle pgsql9]

    foreach R [list 1 2 3 4] {
        set res($R) [$conn exec "SELECT * FROM Pg_class LIMIT $R"]
    }

    #set results [lsort [pg::results $conn]]
    set results [lsort [pg::dbinfo results $conn]]

    foreach R [list 1 2 3 4] {

        pg_result $res($R) -clear
    }

    pg_disconnect $conn

    set results

} [lsort [list pgsql9.0 pgsql9.1 pgsql9.2 pgsql9.3]]

#
##
#
test pgtcl-4.2 {test using result handle command} {

    catch {unset res}

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec "SELECT * FROM Pg_class LIMIT 1"]

    set num [$res -numTuples]
    $res -clear

    pg_disconnect $conn

    set num
} 1

#
#
#
test pgtcl-4.3 {test deleting of a result handle} {
    unset -nocomplain res

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec "SELECT * FROM Pg_class  WHERE relname='tables'"]

    rename $res {}

    #pg::result $res -clear
    pg::dbinfo results $conn

} [list]

## only check if have dicts installed
if {[llength [info commands dict]] == 1} {
#
#
#
test pgtcl-4.4 {get results as a DICT} {

    unset res

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec "SELECT * FROM Pg_class  WHERE relname='pg_tables'"]

    set results [pg::result $res -dict]

    pg_result $res -clear

    pg_disconnect $conn

    dict get $results 0 relname

} pg_tables
}

test pgtcl-4.5 {get results as a list} {

    unset res

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec "SELECT relname 
                           FROM Pg_class 
                          WHERE relname LIKE 'pg_%' 
                       ORDER BY relname 
                          LIMIT 5"]

    set results [pg::result $res -list]

    pg_result $res -clear

    pg_disconnect $conn

    lsort $results
    
} [list pg_aggregate pg_aggregate_fnoid_index pg_am pg_am_name_index pg_am_oid_index]


#
#
#
test pgtcl-4.6 {get results as a list of lists} {

    unset res

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec "SELECT relname, relkind
                           FROM Pg_class 
                          WHERE relname LIKE 'pg_%' 
                       ORDER BY relname 
                          LIMIT 3"]

    set results [pg::result $res -llist]

    pg_result $res -clear

    pg_disconnect $conn

    lsort $results
    
} [list [list pg_aggregate r] [list pg_aggregate_fnoid_index i] [list pg_am r]]


#
#
#
test pgtcl-5.1 {quote a string} {

    set qstr [pg::quote "o'reilly"]

    set qstr
} 'o''reilly'

#
#
#
test pgtcl-5.2 {escape a binary string} {

    set bn [binary format a* \000\\HELLO's]
    set qstr [pg::escape_bytea $bn]

    set qstr
} \\\\000\\\\\\\\HELLO\\'s

#
#
#
test pgtcl-5.3 {unescape a binary string} {

    set bn [binary format a* \000\\HELLO's]
    set qstr [pg::unescape_bytea "\\\\000\\\\\\\\HELLO\\'s"]

    set qstr
} [binary format a* \\000\\\\HELLO\'s]



#
#
#
test pgtcl-6.1 {using pg_exec with params} {

    unset res

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec {SELECT relname
                           FROM Pg_class
                          WHERE relname LIKE $1 
                       ORDER BY relname
                          LIMIT $2} "pg_%" 5]

    set results [pg::result $res -list]

    pg_result $res -clear

    pg_disconnect $conn

    lsort $results

} [list pg_aggregate pg_aggregate_fnoid_index pg_am pg_am_name_index pg_am_oid_index]


#
#
#
test pgtcl-6.2 {using pg_exec_prepared with params} {

    unset res

    set conn [pg::connect -connlist [array get ::conninfo]]

    set res [$conn exec {PREPARE test_prepare (integer)
                          AS SELECT relname
                           FROM Pg_class
                          WHERE relname LIKE 'pg_%'
                       ORDER BY relname
                          LIMIT $1}]

    set res [pg::exec_prepared $conn test_prepare 5]

    set results [pg::result $res -list]

    if {[$res -status] != "PGRES_TUPLES_OK"} {
            puts "[$res -status] [pg::result $res -error] during select"
    }

    pg_result $res -clear

    pg_disconnect $conn

    lsort $results

} [list pg_aggregate pg_aggregate_fnoid_index pg_am pg_am_name_index pg_am_oid_index]


#
#
#
test pgtcl-7.1 {using pg_select} {

    unset res

    set conn [pg::connect -connlist [array get ::conninfo]]

    pg::select $conn "SELECT relname FROM Pg_class LIMIT 5" resultArr {
        set headers $resultArr(.headers)
        set numcols $resultArr(.numcols)
        set tupno $resultArr(.tupno)

        lappend names $resultArr(relname)
        
    } 

    rename $conn {}

    llength $names
 
} 5



#
#
#
test pgtcl-8.1 {using pg_execute} {

    catch {unset res}
    catch {unset names}

    set conn [pg::connect -connlist [array get ::conninfo]]

    set names [list]
    pg::execute -array resultArr $conn "SELECT relname FROM Pg_class LIMIT 5" {

        lappend names $resultArr(relname)
        
    } 

    rename $conn {}
    llength $names
 
} 5

#
#
#
test pgtcl-8.2 {using connection command handle for pg_execute, no options} {

    catch {unset res}
    catch {unset names}

    set conn [pg::connect -connlist [array get ::conninfo]]

    $conn execute -array resultArr "SELECT relname FROM Pg_class LIMIT 5" {
        lappend ::names $resultArr(relname)
        
    } 

    rename $conn {}

    llength $::names
 
} 5

#
#
#
test pgtcl-8.3 {using connection command handle for pg_execute, -array option} {

    catch {unset res}
    catch {unset names}

    set conn [pg::connect -connlist [array get ::conninfo]]

    $conn execute -array resultArr "SELECT relname FROM Pg_class LIMIT 5" {
        lappend ::names $resultArr(relname)
        
    } 

    rename $conn {}

    llength $::names
 
} 5
